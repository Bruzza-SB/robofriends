{"version":3,"sources":["components/Card.js","components/CardList.js","robots.js","components/SearchBox.js","conteiners/Scroll.js","components/ErrorBoundry.js","conteiners/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","username","className","src","alt","CardsList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundy","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","filteredRobots","filter","robot","toLowerCase","includes","toLocaleLowerCase","ErrorBoundry","CardList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a7b9f9c6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, id, username }) => {\r\n    return (\r\n        <div className=\"tc bg-light-blue dib br3 ma2 grow bw2 shadow-5\">\r\n            <img\r\n                src={`https://robohash.org/${id}?size=200x200`}\r\n                alt=\"Robot\"\r\n            ></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{username}</p>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","// hago esto para no tener que copiar y pegar cada componente e ir cambiandole el indice\r\n// CardList es el parent de Card\r\nimport React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardsList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {robots.map((user, i) => {\r\n                return (\r\n                    <Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                        username={robots[i].username}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardsList;\r\n","export const robots = [\n    {\n        id: 1,\n        name: \"Santi\",\n        username: \"San\",\n        email: \"santi@gmail.com\",\n    },\n    {\n        id: 2,\n        name: \"Rama\",\n        username: \"King\",\n        email: \"rey@gmail.com\",\n    },\n    {\n        id: 3,\n        name: \"Luqui\",\n        username: \"Monchi\",\n        email: \"monchi@gmail.com\",\n    },\n    {\n        id: 4,\n        name: \"Pit\",\n        username: \"Pity\",\n        email: \"pitu@gmail.com\",\n    },\n    {\n        id: 5,\n        name: \"Fer\",\n        username: \"Guti\",\n        email: \"guti@gmail.com\",\n    },\n    {\n        id: 6,\n        name: \"Mate\",\n        username: \"Vasco\",\n        email: \"mate@gmail.com\",\n    },\n    {\n        id: 7,\n        name: \"Agus\",\n        username: \"Chiqui\",\n        email: \"agus@gmail.com\",\n    },\n    {\n        id: 8,\n        name: \"Tomi\",\n        username: \"Tom\",\n        email: \"tom@gmail.com\",\n    },\n    {\n        id: 9,\n        name: \"Jorge\",\n        username: \"george\",\n        email: \"jorge@gmail.com\",\n    },\n    {\n        id: 10,\n        name: \"Andrea\",\n        username: \"andru\",\n        email: \"andre@gmail.com\",\n    },\n    {\n        id: 11,\n        name: \"Tom\",\n        username: \"Anargoli\",\n        email: \"bauti@gmail.com\",\n    },\n    {\n        id: 12,\n        name: \"Nacho\",\n        username: \"Igna\",\n        email: \"bayos@gmail.com\",\n    },\n];\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className=\"p3\">\r\n            <input\r\n                className=\"pa3 ba b--blue bg-lightest-blue\"\r\n                type=\"text\"\r\n                placeholder=\"Buscar amigos\"\r\n                name=\"Buscar un amigo\"\r\n                // onChange ejecuta un JS cuando el usuario cambia lo que pongo en onChange=\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                overflow: \"scroll\",\r\n                border: \"3 px solid black\",\r\n                height: \"700px\",\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundy extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false,\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ops! Hubo un error</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundy;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport { robots } from \"../robots.js\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport Scroll from \"./Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\n// hay que cambiar App a class con toda la sintaxis que tiene constructor, super, render, etc\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        // state es el object que describe a app (this se refiere a App)\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: \"\",\r\n        };\r\n    }\r\n    //Esta funcion registra los cambios como un evento\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value });\r\n        //con los eventos con target y value me da el valor del evento\r\n    };\r\n\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter((robot) => {\r\n            return robot.name\r\n                .toLowerCase()\r\n                .includes(searchfield.toLocaleLowerCase());\r\n        });\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1 className=\"f2\">Robofriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./conteiners/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(\n    <div>\n        <App />\n    </div>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}